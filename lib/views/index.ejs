<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Tank you</title>
</head>
<body>
	<script src="bower/pixi.js/bin/pixi.min.js"></script>
	<script src="bower/pixi-tiled/pixi-tiled.js"></script>
	<script src="bower/gsap/src/uncompressed/TweenMax.js"></script>
	<h1>doot</h1>
	<script>
		//Aliases
		var Container = PIXI.Container,
			autoDetectRenderer = PIXI.autoDetectRenderer,
			loader = PIXI.loader,
			resources = PIXI.loader.resources,
			TextureCache = PIXI.TextureCache,
			Rectangle = PIXI.Rectangle,
			Sprite = PIXI.Sprite,
			tankContainer,
			tankBody,
			tankTurret,
			map;




		//create the stage and renderer, and add the renderer to the DOM
		var stage = new Container();
			renderer = autoDetectRenderer(1000,1000);
		document.body.appendChild(renderer.view);

		//load the sprite and setup the stage
		loader
			.add('tanks','static/images/tanks.json')
			.add('static/images/basic_desert.json',function(res){
				map = res.tiledMap;
			})
			.load(setup);

		function getDegreesFromRad(rad)
		{
			return rad * (180/Math.PI);
		}
		function setup()
		{
			var texture = TextureCache["static/images/tanktiles.png"];
			// var map = TextureCache["static/images/14408772_10205497619598940_855196391_n.jpg"];
			

			
			tankContainer = new Container();
		    tankBody = new Sprite(
		    	resources.tanks.textures["t4Body.png"]
		    	);
		    tankTurret = new Sprite(
		    	resources.tanks.textures["t4Turret.png"]
		    	);
		    
		    
			tankContainer.x = 32;
			tankContainer.y = 200;
			tankContainer.vx = 0;
			tankContainer.vy = 0;
			tankContainer.rv = 0;
			tankContainer.maxSpeed = 2;
			tankContainer.accel = 4;
			tankContainer.forward = tankContainer.reverse = false;

			tankTurret.x = 19;
			tankTurret.y = 30;
			tankTurret.rv = 0;
			tankTurret.pivot.set(12.5,55);

			// tankContainer.anchor.y = tankContainer.anchor.x = 0.5;
			tankContainer.pivot.set(18,30.5);
			tankContainer.addChild(tankBody,tankTurret);
			stage.addChild(map);
			stage.addChild(tankContainer);

		 	 var left = keyboard(65),
		      up = keyboard(87),
		      right = keyboard(68),
		      down = keyboard(83),
		      aimLeft = keyboard(37),
		      aimRight = keyboard(39);


			  //Left arrow key `press` method
			  left.press = function() {
			    //Change the cat's velocity when the key is pressed
			    // tankContainer.vx = -5;
			    // tankContainer.vy = 0;
			    tankContainer.rv = -0.025;
			  };
			  //Left arrow key `release` method
			  left.release = function() {
			    //If the left arrow has been released, and the right arrow isn't down,
			    //and the cat isn't moving vertically:
			    //Stop the cat
			    if (!right.isDown) {
				    tankContainer.rv = 0;
			    }
			  };
			  //Left arrow key `press` method
			  aimLeft.press = function() {
			    //Change the cat's velocity when the key is pressed
			    // tankContainer.vx = -5;
			    // tankContainer.vy = 0;
			    tankTurret.rv = -0.025;
			  };
			  //Left arrow key `release` method
			  aimLeft.release = function() {
			    //If the left arrow has been released, and the right arrow isn't down,
			    //and the cat isn't moving vertically:
			    //Stop the cat
			    if (!right.isDown) {
				    tankTurret.rv = 0;
			    }
			  };

	  		  aimRight.press = function() {
			    // tankContainer.vx = 5;
			    // tankContainer.vy = 0;

			    tankTurret.rv = 0.025;
			  };
			  aimRight.release = function() {
			    if (!left.isDown) {
				    tankTurret.rv = 0;
			    }
			  };
		   //Up
		  up.press = function() {
		    // tankContainer.vy = -5;
		    // tankContainer.vx = 0;
		    // tankContainer.vx = Math.cos(tankContainer.rotation);
		    // tankContainer.vy = Math.sin(tankContainer.rotation);
		    tankContainer.forward = true;

		  };
		  up.release = function() {
		    // if (!down.isDown && tankContainer.vx === 0) {
		    //   tankContainer.vy = 0;
		    // }
		    // tankContainer.vy = 0;
		    // tankContainer.vx = 0;
		    tankContainer.forward = false;
		  };
		  //Right
		  right.press = function() {
		    // tankContainer.vx = 5;
		    // tankContainer.vy = 0;

		    tankContainer.rv = 0.025;
		  };
		  right.release = function() {
		    if (!left.isDown) {
			    tankContainer.rv = 0;
		    }
		  };



		  //Down
		  down.press = function() {
		    // tankContainer.vy = 5;
		    // tankContainer.vx = 0;
		    tankContainer.reverse = true;
		  };
		  down.release = function() {
		    if (!up.isDown) {
		      tankContainer.reverse = false;
		    }
  			};


  			state = play;

  			gameLoop();



			renderer.render(stage);
		}


		function gameLoop() {
		  requestAnimationFrame(gameLoop);


		  state();
		  renderer.render(stage);
		}


		var spriteDirection = -1.5708;
		function play() {

		  //Use the cat's velocity to make it move
		  tankContainer.x += tankContainer.vx;
		  tankContainer.y += tankContainer.vy
		  tankContainer.rotation = tankContainer.rotation + tankContainer.rv;
		  tankTurret.rotation = tankTurret.rotation + tankTurret.rv;

		  if(tankContainer.forward)
		  {
		  	// tankContainer.vx = Math.cos(tankContainer.rotation);


		  	TweenLite.to(tankContainer,tankContainer.accel,{vx:tankContainer.maxSpeed * Math.cos(tankContainer.rotation+spriteDirection)});
		  	TweenLite.to(tankContainer,tankContainer.accel,{vy:tankContainer.maxSpeed * Math.sin(tankContainer.rotation+spriteDirection)});
		    // tankContainer.vy = Math.sin(tankContainer.rotation);
		  }
		  else if(tankContainer.reverse)
		  {
  		  // 	tankContainer.vx = -Math.cos(tankContainer.rotation);
		    // tankContainer.vy = -Math.sin(tankContainer.rotation);	

		    TweenLite.to(tankContainer,tankContainer.accel,{vx:(tankContainer.maxSpeed/2) * -Math.cos(tankContainer.rotation+spriteDirection),ease:Expo.easeOut});
		  	TweenLite.to(tankContainer,tankContainer.accel,{vy:(tankContainer.maxSpeed/2) * -Math.sin(tankContainer.rotation+spriteDirection),ease:Expo.easeOut});
		  }
		  else
		  {
		  	TweenMax.killAll();

		  	TweenLite.to(tankContainer,1,{vx:0});
		  	TweenLite.to(tankContainer,1,{vy:0});

		  }


		}


		//The `keyboard` helper function
		function keyboard(keyCode) {
		  var key = {};
		  key.code = keyCode;
		  key.isDown = false;
		  key.isUp = true;
		  key.press = undefined;
		  key.release = undefined;
		  //The `downHandler`
		  key.downHandler = function(event) {
		    if (event.keyCode === key.code) {
		      if (key.isUp && key.press) key.press();
		      key.isDown = true;
		      key.isUp = false;
		    }
		    event.preventDefault();
		  };

		  //The `upHandler`
		  key.upHandler = function(event) {
		    if (event.keyCode === key.code) {
		      if (key.isDown && key.release) key.release();
		      key.isDown = false;
		      key.isUp = true;
		    }
		    event.preventDefault();
		  };

		  //Attach event listeners
		  window.addEventListener(
		    "keydown", key.downHandler.bind(key), false
		  );
		  window.addEventListener(
		    "keyup", key.upHandler.bind(key), false
		  );
		  return key;
		}
	</script>
</body>
</html>
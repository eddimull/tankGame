<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Tank you</title>
</head>
<body>
	<script src="bower/pixi.js/bin/pixi.min.js"></script>
	<script src="bower/gsap/src/uncompressed/TweenMax.js"></script>
	<h1>doot</h1>
	<script>
		//Aliases
		var Container = PIXI.Container,
			autoDetectRenderer = PIXI.autoDetectRenderer,
			loader = PIXI.loader,
			resources = PIXI.loader.resources,
			TextureCache = PIXI.TextureCache,
			Rectangle = PIXI.Rectangle,
			Sprite = PIXI.Sprite,
			rocket;




		//create the stage and renderer, and add the renderer to the DOM
		var stage = new Container();
			renderer = autoDetectRenderer(512,512);
		document.body.appendChild(renderer.view);

		//load the sprite and setup the stage
		loader
			.add('tile','static/images/tileset.png')
			.load(setup);

		function getDegreesFromRad(rad)
		{
			return rad * (180/Math.PI);
		}
		function setup()
		{
			var texture = TextureCache["static/images/tileset.png"];

			var rectangle = new Rectangle(192,128,64,64);

			texture.frame = rectangle;

		    rocket = new Sprite(texture);

			rocket.x = 32;
			rocket.y = 200;
			rocket.vx = 0;
			rocket.vy = 0;
			rocket.rv = 0;
			rocket.maxSpeed = 2;
			rocket.accel = 4;
			rocket.forward = rocket.reverse = false;


			// rocket.anchor.y = rocket.anchor.x = 0.5;
			rocket.pivot.set(32,32);
			stage.addChild(rocket);

		 	 var left = keyboard(65),
		      up = keyboard(87),
		      right = keyboard(68),
		      down = keyboard(83);

			  //Left arrow key `press` method
			  left.press = function() {
			    //Change the cat's velocity when the key is pressed
			    // rocket.vx = -5;
			    // rocket.vy = 0;
			    rocket.rv = -0.025;
			  };
			  //Left arrow key `release` method
			  left.release = function() {
			    //If the left arrow has been released, and the right arrow isn't down,
			    //and the cat isn't moving vertically:
			    //Stop the cat
			    if (!right.isDown) {
				    rocket.rv = 0;
			    }
			  };


		   //Up
		  up.press = function() {
		    // rocket.vy = -5;
		    // rocket.vx = 0;
		    // rocket.vx = Math.cos(rocket.rotation);
		    // rocket.vy = Math.sin(rocket.rotation);
		    rocket.forward = true;

		  };
		  up.release = function() {
		    // if (!down.isDown && rocket.vx === 0) {
		    //   rocket.vy = 0;
		    // }
		    // rocket.vy = 0;
		    // rocket.vx = 0;
		    rocket.forward = false;
		  };
		  //Right
		  right.press = function() {
		    // rocket.vx = 5;
		    // rocket.vy = 0;

		    rocket.rv = 0.025;
		  };
		  right.release = function() {
		    if (!left.isDown) {
			    rocket.rv = 0;
		    }
		  };

		  //Down
		  down.press = function() {
		    // rocket.vy = 5;
		    // rocket.vx = 0;
		    rocket.reverse = true;
		  };
		  down.release = function() {
		    if (!up.isDown) {
		      rocket.reverse = false;
		    }
  			};


  			state = play;

  			gameLoop();



			renderer.render(stage);
		}


		function gameLoop() {
		  requestAnimationFrame(gameLoop);


		  state();
		  renderer.render(stage);
		}

		function play() {

		  //Use the cat's velocity to make it move
		  rocket.x += rocket.vx;
		  rocket.y += rocket.vy
		  rocket.rotation = rocket.rotation + rocket.rv;

		  if(rocket.forward)
		  {
		  	// rocket.vx = Math.cos(rocket.rotation);


		  	TweenLite.to(rocket,rocket.accel,{vx:rocket.maxSpeed * Math.cos(rocket.rotation)});
		  	TweenLite.to(rocket,rocket.accel,{vy:rocket.maxSpeed * Math.sin(rocket.rotation)});
		    // rocket.vy = Math.sin(rocket.rotation);
		  }
		  else if(rocket.reverse)
		  {
  		  // 	rocket.vx = -Math.cos(rocket.rotation);
		    // rocket.vy = -Math.sin(rocket.rotation);	

		    TweenLite.to(rocket,rocket.accel,{vx:(rocket.maxSpeed/2) * -Math.cos(rocket.rotation),ease:Expo.easeOut});
		  	TweenLite.to(rocket,rocket.accel,{vy:(rocket.maxSpeed/2) * -Math.sin(rocket.rotation),ease:Expo.easeOut});
		  }
		  else
		  {
		  	TweenMax.killAll();

		  	TweenLite.to(rocket,1,{vx:0});
		  	TweenLite.to(rocket,1,{vy:0});

		  }


		}


		//The `keyboard` helper function
		function keyboard(keyCode) {
		  var key = {};
		  key.code = keyCode;
		  key.isDown = false;
		  key.isUp = true;
		  key.press = undefined;
		  key.release = undefined;
		  //The `downHandler`
		  key.downHandler = function(event) {
		    if (event.keyCode === key.code) {
		      if (key.isUp && key.press) key.press();
		      key.isDown = true;
		      key.isUp = false;
		    }
		    event.preventDefault();
		  };

		  //The `upHandler`
		  key.upHandler = function(event) {
		    if (event.keyCode === key.code) {
		      if (key.isDown && key.release) key.release();
		      key.isDown = false;
		      key.isUp = true;
		    }
		    event.preventDefault();
		  };

		  //Attach event listeners
		  window.addEventListener(
		    "keydown", key.downHandler.bind(key), false
		  );
		  window.addEventListener(
		    "keyup", key.upHandler.bind(key), false
		  );
		  return key;
		}
	</script>
</body>
</html>
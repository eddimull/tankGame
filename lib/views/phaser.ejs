<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
	<title>Tank you</title>
	<!-- <link src="bower/mueller/stylesheets/grid/output.css"></script> -->
    <link href="bower/bootstrap/dist/css/bootstrap.css" rel="stylesheet" type="text/css" />
</head>
<body>
    <style>
        @media (min-width: 1200px) {
            .container{
                max-width: 1280px;
            }
        }
    </style>
    <div class="row" id="game-div" style="background:green;margin:0 auto;padding:0;max-width:900px;width:100%"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-6  visible-md" style="background:red"> left side control </div>
            <div class="col-md-6 visible-md" style="background:blue"> right side control </div>
            <div class="visible-sm visible-xs col-sm-6 col-xs-6" style="background:red">left gameboy</div>
            <div class="visible-sm visible-xs col-sm-6  col-xs-6" style="background:blue">right gameboy</div>
        </div>
    </div>
    <script src="bower/phaser/build/phaser.js"></script>
    <script src="bower/phaser-tiled/dist/phaser-tiled.js"></script>
    <script src="bower/gsap/src/uncompressed/TweenMax.js"></script>
    <script src="bower/rainbowvis.js/rainbowvis.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script>

	var socket = io.connect(window.location.host);

	socket.on('message',function(data){
		console.log(data);
	});
	socket.on('newClient',function(data){
		clients[data.client] = {};
	});
	socket.on('disconnect',function(data){
		// clients.push(data);
		console.log(data);
		delete clients[data];
		
	});
    var rainbow = new Rainbow();
    rainbow.setSpectrum('ff0000', 'ffff00', '00ff00');
    rainbow.setNumberRange(0,1);
    HUD = function (x,y) {

        this.healthbar = game.add.graphics();
        this.healthbar.beginFill(0xFF3300);
        this.healthbar.beginFill(parseInt('0X' +  rainbow.colorAt(100)));
        this.healthbar.drawRect(32,580,300,3);
        this.healthbar.fixedToCamera = true;

    };
    HUD.prototype.update = function(x,y){
        // this.healthbar.x = x || 32;
        // this.healthbar.y = y || 64;
    }


	EnemyTank = function (index, game, player, bullets) {

	    var x = game.world.randomX;
	    var y = game.world.randomY;

	    this.game = game;
	    this.health = 10;
        this.startingHealth = this.health;
	    this.player = player;
	    this.bullets = bullets;
	    this.fireRate = 1000;
	    this.nextFire = 0;
	    this.alive = true;

	    this.shadow = game.add.sprite(x, y, 'enemy', 'shadow');
	    this.tank = game.add.sprite(x, y, 'enemy', 'tank1');
	    this.turret = game.add.sprite(x, y, 'enemy', 'turret');

	    this.shadow.anchor.set(0.5);
	    this.tank.anchor.set(0.5);
	    this.turret.anchor.set(0.3, 0.5);

	    this.tank.name = index.toString();
	    game.physics.enable(this.tank, Phaser.Physics.ARCADE);
	    this.tank.body.immovable = false;
	    this.tank.body.collideWorldBounds = true;
	    this.tank.body.bounce.setTo(1, 1);

	    this.tank.angle = game.rnd.angle();

	    game.physics.arcade.velocityFromRotation(this.tank.rotation, 100, this.tank.body.velocity);

        this.healthbar = game.add.graphics();
        this.healthbar.beginFill(parseInt('0X' + rainbow.colorAt(1)));
        this.healthbar.drawRect(-this.tank.body.width/2,-40,this.tank.body.width,3);



	};


	ClientTank = function (index, data, game, player) {

	    var x = data.x || 400;
	    var y = data.y || 400;
	    this.game = game;
	    this.health = 3;
	    this.player = player;
	    this.bullets = bullets;
	    this.fireRate = 1000;
	    this.nextFire = 0;
	    this.alive = true;

	    this.shadow = game.add.sprite(x, y, 'enemy', 'shadow');
	    this.tank = game.add.sprite(x, y, 'tanks', 't3Body.png');
	    this.turret = game.add.sprite(0, 0, 'tanks', 't3Turret.png');
	    this.turret.pivot.set(6,12);


	    this.shadow.anchor.set(0.5);
	    this.tank.anchor.set(0.5);
	    this.turret.anchor.set(0.3, 0.5);

	    this.tank.name = index.toString();
	    game.physics.enable(this.tank, Phaser.Physics.ARCADE);
	    this.tank.body.immovable = true;
	    this.tank.body.collideWorldBounds = true;
	    this.tank.body.bounce.setTo(1, 1);

	    // this.tank.angle = game.rnd.angle();

	    // game.physics.arcade.velocityFromRotation(this.tank.rotation, 100, this.tank.body.velocity);



	    

	};

EnemyTank.prototype.damage = function() {

    this.health -= 1;
    var healthPercent = this.health/this.startingHealth;
    this.healthbar.clear();
    this.healthbar.width = healthPercent * this.healthbar.width;
    this.healthbar.beginFill(parseInt('0X' +  rainbow.colorAt(healthPercent)));
    this.healthbar.drawRect(-this.tank.body.width/2,-40,healthPercent * this.tank.body.width,3);
    // console.log();
    // this.healthbar.fillColor = parseInt('0X' +  rainbow.colorAt(healthPercent));



    if (this.health <= 0)
    {
        this.alive = false;

        this.shadow.kill();
        this.tank.kill();
        this.turret.kill();
        this.healthbar.kill();

        return true;
    }

    return false;

}

EnemyTank.prototype.update = function() {

    this.shadow.x = this.tank.x;
    this.shadow.y = this.tank.y;
    this.shadow.rotation = this.tank.rotation;

    this.turret.x = this.tank.x;
    this.turret.y = this.tank.y;

    this.healthbar.x = this.tank.x;
    this.healthbar.y = this.tank.y;

    this.turret.rotation = this.game.physics.arcade.angleBetween(this.tank, this.player);

    if (this.game.physics.arcade.distanceBetween(this.tank, this.player) < 300)
    {
        if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0)
        {
            this.nextFire = this.game.time.now + this.fireRate;

            var bullet = this.bullets.getFirstDead();

            bullet.reset(this.turret.x, this.turret.y);

            bullet.rotation = this.game.physics.arcade.moveToObject(bullet, this.player, 500);
        }
    }

};


ClientTank.prototype.damage = function() {

    this.health -= 1;

    if (this.health <= 0)
    {
        this.alive = false;

        this.shadow.kill();
        this.tank.kill();
        this.turret.kill();

        return true;
    }

    return false;

}


ClientTank.prototype.update = function(data) {

	// console.log(this);
	// console.log(data);
	if(typeof(data) !== 'undefined')
	{
		// console.log(this.tank.x);
		// console.log(data);
		// this.tank.x = data.x;
		// this.tank.y = data.y;
        this.tank.rotation = data.rotation;
        // var tween = game.add.tween(this.tank).to({ x: data.x, x: data.y }, 10, Phaser.Easing.Linear.None, true, 0);
        TweenMax.to(this.tank,1,{rotation: data.rotation, x: data.x, y: data.y});
        TweenMax.to(this.turret,1,{rotation: data.tRotation});
        // tween.start();
        // game.physics.arcade.moveToXY(this.tank, data.x, data.y,1000);

         // = ;
        // this.turret.rotation = data.tRotation;
        // console.log(data.rotation);

    }

    // game.physics.arcade.moveToXY(this.tank, data.x, data.y, 300, 100);
    this.shadow.x = this.tank.x;
    this.shadow.y = this.tank.y;
    this.shadow.rotation = this.tank.rotation;

    this.turret.x = this.tank.x + 0;
    this.turret.y = this.tank.y + 0;
    // this.turret.rotation = this.game.physics.arcade.angleBetween(this.tank, this.player);

    // if (this.game.physics.arcade.distanceBetween(this.tank, this.player) < 300)
    // {
    //     if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0)
    //     {
    //         this.nextFire = this.game.time.now + this.fireRate;

    //         var bullet = this.bullets.getFirstDead();

    //         bullet.reset(this.turret.x, this.turret.y);

    //         bullet.rotation = this.game.physics.arcade.moveToObject(bullet, this.player, 500);
    //     }
    // }

};


socket.on('serverShot',function(data){
    // console.log(data);
    if(data.id !== socket.id)
    {
        console.log('fire?');
        var tank = clients['/#' + data.id].tank;

        tank.nextFire = game.time.now + tank.fireRate;

        var bullet = tank.bullets.getFirstDead();

        bullet.reset(tank.turret.x, tank.turret.y);

        // bullet.rotation = this.game.physics.arcade.moveToObject(bullet, this.player, 500);
        bullet.rotation = game.physics.arcade.moveToXY(bullet, data.bulletDestX, data.bulletDestY, 1000, 500);
    }
});

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'game-div', { preload: preload, create: create, update: update, render: render });


function preload () {

    game.load.atlas('tank', 'static/assets/games/tanks/tanks.png', 'static/assets/games/tanks/tanks.json');
    game.load.atlas('enemy', 'static/assets/games/tanks/enemy-tanks.png', 'static/assets/games/tanks/tanks.json');
    game.load.image('logo', 'static/assets/games/tanks/logo.png');
    game.load.image('bullet', 'static/assets/games/tanks/bullet.png');
    game.load.image('earth', 'static/assets/games/tanks/scorched_earth.png');
    game.load.spritesheet('kaboom', 'static/assets/games/tanks/explosion.png', 64, 64, 23);

	game.load.tilemap('map','static/map/basic_desert.json',null, Phaser.Tilemap.TILED_JSON);
	game.load.image('tiles','static/map/14389890_10101464731169187_1920077060_n.jpg');
	game.load.atlas('tanks','static/images/tanktiles.png','static/images/tanks.json',Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);
    
}

var land;

var shadow;
var tank;
var turret;

var enemies;
var enemyBullets;
var enemiesTotal = 0;
var enemiesAlive = 0;
var explosions;

var logo;

var currentSpeed = 0;
var cursors;
var wasd;
var map;
var layer;
var bullets;
var fireRate = 100;
var nextFire = 0;
var spriteDirection = -1.5708;
var timer = 0;
var gameData = {};
var refreshInterval = 1;
var clients = {};
var HUD;






function create () {

game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
// game.scale.setScreenSize();
game.scale.minWidth = 320;
game.scale.minHeight = 188;
// game.scale.maxWidth = 800;
// game.scale.maxHeight = 450;
game.stage.disableVisibilityChange = true;
    //  Resize our game world to be a 2000 x 2000 square
    game.world.setBounds(-1000, -1000, 2000, 2000);

    //  Our tiled scrolling background
    // land = game.add.tileSprite(0, 0, 800, 600, 'earth');
    // land = game.add.tileMap(0, 0, 800, 600, 'earth');
     // map.addTilesetImage('Desert','tiles');

             // layer = map.createLayer('Tile Layer 1');
    // land.fixedToCamera = true;

    map = game.add.tilemap('map');

    map.addTilesetImage('Desert','tiles');

    layer = map.createLayer('Tile Layer 1');
    layer.resizeWorld();
    layer.fixedToCamera = true;

    //  The base of our tank
    tank = game.add.sprite(0, 0, 'tanks', 't4Body.png');
    tank.anchor.setTo(0.5, 0.5);
    tank.animations.add('move', ['tank1', 'tank2', 'tank3', 'tank4', 'tank5', 'tank6'], 20, true);
    
    tank.startingHealth = tank.health = 20;
    tank.deaths = 0;
    tank.HUD = new HUD();
    tank.x = 400;
    tank.y = 400;

    //  This will force it to decelerate and limit its speed
    game.physics.enable(tank, Phaser.Physics.ARCADE);
    tank.body.drag.set(0.2);
    tank.body.maxVelocity.setTo(400, 400);
    tank.body.collideWorldBounds = true;

    //  Finally the turret that we place on-top of the tank body
    turret = game.add.sprite(0, 0, 'tanks', 't4Turret.png');
    turret.pivot.set(12.5,55);
    game.physics.enable(turret, Phaser.Physics.ARCADE);
    // turret.maxVelocity.setTo(400, 400);
    // turret.anchor.setTo(0.3, 0.5);


    tank.damage = function() {




        this.health -= 1;
        var healthPercent = this.health/this.startingHealth;
        tank.HUD.healthbar.clear();
        tank.HUD.healthbar.width = healthPercent * tank.HUD.healthbar.width;
        tank.HUD.healthbar.beginFill(parseInt('0X' +  rainbow.colorAt(healthPercent)));
        // this.healthbar.drawRect(32,580,300,3);
        tank.HUD.healthbar.drawRect(32,580,healthPercent * 300,3);


        // console.log(this.health);

        if (this.health <= 0)
        {
            this.alive = false;

            shadow.kill();
            tank.kill();
            turret.kill();

            return true;
        }

        return false;

    }

    tank.respawn = function() {
        tank.x = Math.round(map.widthInPixels * Math.random());
        tank.y = Math.round(map.heightInPixels * Math.random());
        this.deaths += 1;
        shadow.revive();
        tank.revive();
        turret.revive();
        tank.health = this.startingHealth;

        tank.HUD.healthbar.clear();
        tank.HUD.healthbar.width = healthPercent * tank.HUD.healthbar.width;
        tank.HUD.healthbar.beginFill(parseInt('0X' +  rainbow.colorAt(100)));
        // this.healthbar.drawRect(32,580,300,3);
        tank.HUD.healthbar.drawRect(32,580,healthPercent * 300,3);
    }

    //  The enemies bullet group
    enemyBullets = game.add.group();
    enemyBullets.enableBody = true;
    enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    enemyBullets.createMultiple(100, 'bullet');
    
    enemyBullets.setAll('anchor.x', 0.5);
    enemyBullets.setAll('anchor.y', 0.5);
    enemyBullets.setAll('outOfBoundsKill', true);
    enemyBullets.setAll('checkWorldBounds', true);

    //  Create some baddies to waste :)
    enemies = [];

    enemiesTotal = 20;
    enemiesAlive = 20;

    for (var i = 0; i < enemiesTotal; i++)
    {
        enemies.push(new EnemyTank(i, game, tank, enemyBullets));
    }

    socket.on('gameData',function(data){
		// console.log(data);
		gameData = data;
		for(i in gameData)
		{
			if(i !== '/#' + socket.id)
			{
				//clients.push(new ClientTank(i, game, tank));
				//clients.push(new ClientTank(i, game, tank));
				// console.log(i, clients[i]);
				if(!clients.hasOwnProperty(i))
				{
					clients[i] = {};
				}
				if(!clients[i].hasOwnProperty('tank'))
				{
					clients[i].tank = new ClientTank(i, gameData[i], game, tank);
				}

				if(gameData[i].x)
				{

					clients[i].tank.update(gameData[i]);
					clients[i].tank.x = gameData[i].x;
                    clients[i].tank.y = gameData[i].y;
					clients[i].tank.rotation = gameData[i].rotation;
				}


			}
		}
	});



    //  A shadow below our tank
    shadow = game.add.sprite(0, 0, 'tank', 'shadow');
    shadow.anchor.setTo(0.5, 0.5);

    //  Our bullet group
    bullets = game.add.group();
    bullets.enableBody = true;
    bullets.physicsBodyType = Phaser.Physics.ARCADE;
    bullets.createMultiple(30, 'bullet', 0, false);
    bullets.setAll('anchor.x', 0.5);
    bullets.setAll('anchor.y', 0.5);
    bullets.setAll('outOfBoundsKill', true);
    bullets.setAll('checkWorldBounds', true);

    //  Explosion pool
    explosions = game.add.group();

    for (var i = 0; i < 10; i++)
    {
        var explosionAnimation = explosions.create(0, 0, 'kaboom', [0], false);
        explosionAnimation.anchor.setTo(0.5, 0.5);
        explosionAnimation.animations.add('kaboom');
    }

    tank.bringToTop();
    turret.bringToTop();

    // logo = game.add.sprite(0, 200, 'logo');
    // logo.fixedToCamera = true;

    // game.input.onDown.add(removeLogo, this);

    game.camera.follow(tank);
    // game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
    game.camera.focusOnXY(0, 0);

    cursors = game.input.keyboard.createCursorKeys();
    wasd = {
	  w: game.input.keyboard.addKey(Phaser.Keyboard.W),
	  s: game.input.keyboard.addKey(Phaser.Keyboard.S),
	  a: game.input.keyboard.addKey(Phaser.Keyboard.A),
	  d: game.input.keyboard.addKey(Phaser.Keyboard.D),
	  space: game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)
	};
}

function removeLogo () {

    game.input.onDown.remove(removeLogo, this);
    logo.kill();

}

function update () {

	if(timer >= refreshInterval)
	{
		socket.emit('updatePosition',{x:tank.x,y:tank.y,rotation:tank.rotation,tRotation:turret.rotation});	
		timer = 0;
	}	
	else
	{
		timer++
	}

    game.physics.arcade.overlap(enemyBullets, tank, bulletHitPlayer, null, this);

    enemiesAlive = 0;

    for (var i = 0; i < enemies.length; i++)
    {
        if (enemies[i].alive)
        {
            enemiesAlive++;
            game.physics.arcade.collide(tank, enemies[i].tank,function(){
                console.log('collision');
            });
            game.physics.arcade.overlap(bullets, enemies[i].tank, bulletHitEnemy, null, this);
            enemies[i].update();
        }
    }

    for(i in clients)
    {
        if(clients[i].hasOwnProperty('tank'))
        {
            // console.log(clients[i].tank);
            game.physics.arcade.collide(tank, clients[i].tank.tank,function(){
                console.log('collide');
            });
            // game.physics.arcade.overlap(bullets, clients[i].tank.tank, bulletHitClient, null, this);
            // game.physics.arcade.overlap(bullets, clients[i].tank.tank, bulletHitEnemy, null, this);
			clients[i].tank.update();
		}
    }

    if (wasd.a.isDown)
    {
        tank.angle -= 4;
    }
    else if (wasd.d.isDown)
    {
        tank.angle += 4;
    }

  if (wasd.w.isDown)
    {
        //  The speed we'll travel at
        currentSpeed = 300;
    }
    
    if(wasd.s.isDown && !wasd.w.isDown)
    {
	   currentSpeed = -300;
    }
    else if (wasd.w.isDown && !wasd.s.isDown)
    {
        //  The speed we'll travel at
        currentSpeed = 300;
    }
    else
    {
        if (currentSpeed !== 0)
        {
        	if(currentSpeed > 0)
        	{
            	currentSpeed -= 4;
            }
            else
            {
            	currentSpeed += 4;
            }
        }
    }
    
    if (currentSpeed > 0 || currentSpeed < -1)
    {
        game.physics.arcade.velocityFromRotation(tank.rotation + spriteDirection, currentSpeed, tank.body.velocity);
        // game.physics.arcade.velocityFromRotation(tank.rotation + spriteDirection, currentSpeed, turret);
    }

    // land.tilePosition.x = -game.camera.x;
    // land.tilePosition.y = -game.camera.y;

    //  Position all the parts and align rotations
    shadow.x = tank.x;
    shadow.y = tank.y;
    shadow.rotation = tank.rotation;

    turret.x = tank.body.x + (tank.body.width/2);
    turret.y = tank.body.y + (tank.body.height/2);
    tank.HUD.update(tank.x,tank.y);
    if(cursors.right.isDown && !cursors.left.isDown)
    {

	    turret.rotation += .1;
    }
    if(cursors.left.isDown && !cursors.right.isDown)
    {
	    turret.rotation -= .1;
	}
    if (game.input.activePointer.isDown || wasd.space.isDown)
    {
        //  Boom!
        fire();
    }

}


function bulletHitPlayer (tank, bullet) {

    bullet.kill();
    var destroyed = tank.damage();

    if (destroyed)
    {
        var explosionAnimation = explosions.getFirstExists(false);
        explosionAnimation.reset(tank.x, tank.y);
        explosionAnimation.play('kaboom', 30, false, true);

        setTimeout(function(){
            tank.respawn();
        },3000)
    }

}

function bulletHitEnemy (tank, bullet) {

    bullet.kill();

    var destroyed = enemies[tank.name].damage();

    if (destroyed)
    {
        var explosionAnimation = explosions.getFirstExists(false);
        explosionAnimation.reset(tank.x, tank.y);
        explosionAnimation.play('kaboom', 30, false, true);
    }

}
function bulletHitClient (tank, bullet) {

    bullet.kill();
    // console.log(tank);
    // var destroyed = clients[tank.name].tank.damage();

    // if (destroyed)
    // {
    //     var explosionAnimation = explosions.getFirstExists(false);
    //     explosionAnimation.reset(tank.x, tank.y);
    //     explosionAnimation.play('kaboom', 30, false, true);
    // }

}


function fire () {

    if (game.time.now > nextFire && bullets.countDead() > 0)
    {
        nextFire = game.time.now + fireRate;

        var bullet = bullets.getFirstExists(false);
        bullet.lifespan = 500;
        bullet.reset(turret.x, turret.y);
        var point = resolveToPoint(turret.rotation + spriteDirection,1000,tank);
        // bullet.rotation = game.physics.arcade.moveToPointer(bullet, 1000, turret.rotation, 500);
        bullet.rotation = game.physics.arcade.moveToXY(bullet, point.mX, point.mY, 1000, 500);
        socket.emit('clientShot',{id:socket.id,bulletStartX:bullet.x,bulletStartY:bullet.y,bulletDestX:point.mX,bulletDestY:point.mY,bulletRotation:bullet.rotation});
    	// bullet.rotation = turret.rotation;
    }

}


function resolveToPoint(rad, diameter, tank) {
    var r = diameter / 2;
    return {mX: tank.x + (r * Math.cos(rad)), mY: tank.y + (r * Math.sin(rad))};
}

function render () {

    // game.debug.text('Active Bullets: ' + bullets.countLiving() + ' / ' + bullets.length, 32, 32);
    game.debug.text('Enemies: ' + enemiesAlive + ' / ' + enemiesTotal, 32, 32);


}
	</script>
</body>
</html>